// Mocks generated by Mockito 5.4.4 from annotations
// in madang_app/test/data/local/local_database_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:madang_app/data/local/local_database_service.dart' as _i3;
import 'package:madang_app/data/model/restaurant_detail_response.dart' as _i5;
import 'package:madang_app/data/model/restaurant_list_response.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalDatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDatabaseService extends _i1.Mock
    implements _i3.LocalDatabaseService {
  MockLocalDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i4.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#database),
        )),
      ) as _i4.Future<_i2.Database>);

  @override
  _i4.Future<void> createTables(_i2.Database? db) => (super.noSuchMethod(
        Invocation.method(
          #createTables,
          [db],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> insertItem(_i5.Restaurant? item) => (super.noSuchMethod(
        Invocation.method(
          #insertItem,
          [item],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<_i6.Restaurants>> getAllItems() => (super.noSuchMethod(
        Invocation.method(
          #getAllItems,
          [],
        ),
        returnValue:
            _i4.Future<List<_i6.Restaurants>>.value(<_i6.Restaurants>[]),
      ) as _i4.Future<List<_i6.Restaurants>>);

  @override
  _i4.Future<_i5.Restaurant?> getItemById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getItemById,
          [id],
        ),
        returnValue: _i4.Future<_i5.Restaurant?>.value(),
      ) as _i4.Future<_i5.Restaurant?>);

  @override
  _i4.Future<bool> removeItem(String? id) => (super.noSuchMethod(
        Invocation.method(
          #removeItem,
          [id],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> clearDb() => (super.noSuchMethod(
        Invocation.method(
          #clearDb,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
